import os
import logging
import requests
import asyncio
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("EXCHANGE_API_KEY")
CHAT_IDS = [-1002174956701, -1002291124169]

if not TOKEN or not API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

app = Application.builder().token(TOKEN).build()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_exchange_rates():
    url = f"https://api.exchangerate-api.com/v4/latest/USD?apikey={API_KEY}"
    try:
        response = requests.get(url)
        data = response.json()
        usd_kzt = data["rates"]["KZT"]
        eur_kzt = data["rates"]["KZT"] / data["rates"]["EUR"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        usd_kzt, eur_kzt = "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    return usd_kzt, eur_kzt

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_crypto_rates():
    url = f"https://api.cryptonator.com/api/ticker/btc-usd"
    try:
        response = requests.get(url)
        btc_usd = response.json()["ticker"]["price"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC/USD: {e}")
        btc_usd = "–û—à–∏–±–∫–∞"

    url = f"https://api.cryptonator.com/api/ticker/eth-usd"
    try:
        response = requests.get(url)
        eth_usd = response.json()["ticker"]["price"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ETH/USD: {e}")
        eth_usd = "–û—à–∏–±–∫–∞"

    return btc_usd, eth_usd

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def update_pinned_message(context: ContextTypes.DEFAULT_TYPE):
    usd_kzt, eur_kzt = get_exchange_rates()
    btc_usd, eth_usd = get_crypto_rates()

    message = (
        f"üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*:\n"
        f"üá∫üá∏ 1 USD = {usd_kzt} KZT\n"
        f"üá™üá∫ 1 EUR = {eur_kzt} KZT\n"
        f"üü† 1 BTC = {btc_usd} USD\n"
        f"üîµ 1 ETH = {eth_usd} USD\n"
    )

    for chat_id in CHAT_IDS:
        try:
            bot = context.bot
            pinned_messages = await bot.get_chat(chat_id)
            if pinned_messages.pinned_message:
                await bot.edit_message_text(chat_id=chat_id, message_id=pinned_messages.pinned_message.message_id, text=message, parse_mode="Markdown")
            else:
                sent_message = await bot.send_message(chat_id, text=message, parse_mode="Markdown")
                await bot.pin_chat_message(chat_id, sent_message.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")

app.add_handler(CommandHandler("start", start))

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def periodic_update():
    while True:
        await update_pinned_message(ContextTypes.DEFAULT_TYPE)
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
    asyncio.run(periodic_update())
