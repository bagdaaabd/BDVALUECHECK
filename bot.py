import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL webhook
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º Telegram Bot
application = Application.builder().token(TOKEN).build()

# ID –≥—Ä—É–ø–ø
GROUP_IDS = [-1002291124169, -1002174956701]
pinned_messages = {}  # –•—Ä–∞–Ω–∏–º message_id –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context) -> None:
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

application.add_handler(CommandHandler("start", start))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
async def update_pinned_message():
    global pinned_messages
    new_text = "üîÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSD/KZT: 450.5\nEUR/KZT: 495.3\nBTC/USD: 43000\nETH/USD: 2500"

    for chat_id in GROUP_IDS:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            pinned_message = await application.bot.get_chat(chat_id)
            message_id = pinned_message.pinned_message.message_id if pinned_message.pinned_message else None

            if message_id:
                # –ï—Å–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}, ID: {message_id}")
                await application.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
                sent_message = await application.bot.send_message(chat_id=chat_id, text=new_text)
                await application.bot.pin_chat_message(chat_id=chat_id, message_id=sent_message.message_id)
                pinned_messages[chat_id] = sent_message.message_id
                logger.info(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}, ID: {sent_message.message_id}")

        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ {chat_id}: {e}")

# Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def home():
    return "ü§ñ Bot is running!", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    json_update = request.get_json()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json_update}")

    update = Update.de_json(json_update, application.bot)
    asyncio.run(application.process_update(update))

    return "ok", 200

async def set_webhook():
    """–§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    await application.bot.set_webhook(WEBHOOK_URL + "/webhook")
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")

async def main():
    await application.initialize()
    await set_webhook()
    await application.start()

    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    while True:
        await update_pinned_message()
        await asyncio.sleep(600)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())  
    app.run(host="0.0.0.0", port=PORT, use_reloader=False)
