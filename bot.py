import os
import logging
import asyncio
import httpx
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler
import uvicorn  # –ò—Å–ø–æ–ª—å–∑—É–µ–º uvicorn –¥–ª—è ASGI —Å–µ—Ä–≤–µ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))
CHAT_IDS = [-1002291124169, -1002174956701]  # ID –≥—Ä—É–ø–ø

if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot
bot = Bot(token=TOKEN)
application = Application.builder().token(TOKEN).build()

# API –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
CURRENCY_API_URL = "https://api.apilayer.com/currency_data/live?source=USD&currencies=KZT,EUR&apikey=SC86xx0kCQ90R0a9Wi7oGU4zvqmy4Qnq"
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
async def fetch_rates():
    async with httpx.AsyncClient() as client:
        currency_response = await client.get(CURRENCY_API_URL)
        crypto_response = await client.get(CRYPTO_API_URL)
    
    if currency_response.status_code == 200 and crypto_response.status_code == 200:
        currency_data = currency_response.json()
        crypto_data = crypto_response.json()
        
        usd_kzt = currency_data["quotes"].get("USDKZT", "N/A")
        eur_usd = currency_data["quotes"].get("USDEUR", 1)
        eur_kzt = usd_kzt / eur_usd if eur_usd != 0 else "N/A"
        btc_usd = crypto_data["bitcoin"]["usd"]
        eth_usd = crypto_data["ethereum"]["usd"]
        
        logger.info(f"üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç: {currency_data}")
        logger.info(f"ü™ô –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {crypto_data}")
        
        return (f"üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n\n"
                f"üá∫üá∏ 1 USD = {usd_kzt:.2f} KZT\n"
                f"üá™üá∫ 1 EUR = {eur_kzt:.2f} KZT\n"
                f"üü† 1 BTC = ${btc_usd:.2f}\n"
                f"üíé 1 ETH = ${eth_usd:.2f}")
    else:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def update_pinned_message():
    text = await fetch_rates()
    for chat_id in CHAT_IDS:
        message = await bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
        await bot.pin_chat_message(chat_id=chat_id, message_id=message.message_id)
        logger.info(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}, ID: {message.message_id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

application.add_handler(CommandHandler("start", start))

# Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def home():
    return "ü§ñ Bot is running!", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    json_update = request.get_json()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json_update}")
    update = Update.de_json(json_update, application.bot)
    application.process_update(update)
    return "ok", 200

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
async def set_webhook():
    await application.bot.set_webhook(WEBHOOK_URL + "/webhook")
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def periodic_update():
    while True:
        await update_pinned_message()
        await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await application.initialize()
    await set_webhook()
    asyncio.create_task(periodic_update())  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
    await application.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±—Ö—É–∫–æ–≤

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    uvicorn.run(app, host="0.0.0.0", port=PORT)  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —á–µ—Ä–µ–∑ Uvicorn
