import logging
import asyncio
import os
import httpx
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ API-–∫–ª—é—á–∞)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_KEY = os.getenv("EXCHANGE_RATE_API_KEY")  # API-–∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç
CHAT_IDS = ["-1002174956701", "-1002291124169"]  # ID –≥—Ä—É–ø–ø

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
CURRENCY_API_URL = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/USD"
CRYPTO_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async def get_currency_data():
    usd_kzt, eur_kzt, btc_usd, eth_usd = "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(CURRENCY_API_URL, timeout=10)
            crypto_response = await client.get(CRYPTO_API_URL, timeout=10)

            if response.status_code == 200:
                data = response.json()
                usd_kzt = round(data["conversion_rates"].get("KZT", 0), 2)
                eur_usd = data["conversion_rates"].get("EUR", 0)
                eur_kzt = round(usd_kzt * eur_usd, 2)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç: {response.status_code}")

            if crypto_response.status_code == 200:
                crypto_data = crypto_response.json()
                btc_usd = round(crypto_data.get("bitcoin", {}).get("usd", 0), 2)
                eth_usd = round(crypto_data.get("ethereum", {}).get("usd", 0), 2)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {crypto_response.status_code}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return usd_kzt, eur_kzt, btc_usd, eth_usd

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def format_message(usd_kzt, eur_kzt, btc_usd, eth_usd):
    return (
        f"üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
        f"üíµ USD/KZT: {usd_kzt} ‚Ç∏\n"
        f"üí∂ EUR/KZT: {eur_kzt} ‚Ç∏\n\n"
        f"üåê –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:\n"
        f"‚Çø BTC/USD: {btc_usd} $\n"
        f"‚ö° ETH/USD: {eth_usd} $\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
async def update_pinned_message(app: Application):
    while True:
        usd_kzt, eur_kzt, btc_usd, eth_usd = await get_currency_data()
        message_text = format_message(usd_kzt, eur_kzt, btc_usd, eth_usd)
        
        for chat_id in CHAT_IDS:
            try:
                sent_message = await app.bot.send_message(chat_id, text=message_text)
                await app.bot.pin_chat_message(chat_id, sent_message.message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

        await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç

# –ö–æ–º–∞–Ω–¥–∞ /rate
async def rate(update: Update, context: CallbackContext) -> None:
    usd_kzt, eur_kzt, btc_usd, eth_usd = await get_currency_data()
    message_text = format_message(usd_kzt, eur_kzt, btc_usd, eth_usd)
    await update.message.reply_text(message_text)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("rate", rate))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    loop = asyncio.get_event_loop()
    loop.create_task(update_pinned_message(app))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
