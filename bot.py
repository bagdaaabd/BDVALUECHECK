import asyncio  # üî• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

async def update_pinned_message():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏."""
    rates = get_exchange_rates()
    if not rates:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    text = "üí± *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*:\n\n"

    if rates["USD/KZT"] is not None:
        text += f"üá∫üá∏ 1 USD = {rates['USD/KZT']:.2f} KZT\n"
    else:
        text += "üá∫üá∏ 1 USD = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["EUR/KZT"] is not None:
        text += f"üá™üá∫ 1 EUR = {rates['EUR/KZT']:.2f} KZT\n"
    else:
        text += "üá™üá∫ 1 EUR = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["BTC/USD"] is not None:
        text += f"‚Çø 1 BTC = {rates['BTC/USD']:.2f} USD\n"
    else:
        text += "‚Çø 1 BTC = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["ETH/USD"] is not None:
        text += f"‚õè 1 ETH = {rates['ETH/USD']:.2f} USD\n"
    else:
        text += "‚õè 1 ETH = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    for chat_id in CHAT_IDS:
        try:
            chat = await bot.get_chat(chat_id)  # üî• –î–æ–±–∞–≤–ª—è–µ–º await
            pinned_message = chat.pinned_message

            if pinned_message:
                await bot.edit_message_text(  # üî• –î–æ–±–∞–≤–ª—è–µ–º await
                    chat_id=chat_id,
                    message_id=pinned_message.message_id,
                    text=text,
                    parse_mode="Markdown",
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                sent_message = await bot.send_message(  # üî• –î–æ–±–∞–≤–ª—è–µ–º await
                    chat_id=chat_id,
                    text=text,
                    parse_mode="Markdown",
                )
                await bot.pin_chat_message(  # üî• –î–æ–±–∞–≤–ª—è–µ–º await
                    chat_id=chat_id,
                    message_id=sent_message.message_id,
                )
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞."""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            await update_pinned_message()  # üî• –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Å await
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        await asyncio.sleep(600)  # üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ time.sleep

if __name__ == "__main__":
    asyncio.run(main())  # üî• –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
