import os
import time
import requests
import logging
from telegram import Bot

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")      # API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not BOT_TOKEN or not API_KEY:
    raise ValueError(
        "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ API_KEY!"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

# ID —á–∞—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
CHAT_IDS = ["-1002174956701", "-1002291124169"]  # ID –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø

# URL API –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
EXCHANGE_URL = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/USD"

def get_exchange_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."""
    try:
        response = requests.get(EXCHANGE_URL)
        data = response.json()
        
        if response.status_code != 200 or "conversion_rates" not in data:
            logger.error(f"–û—à–∏–±–∫–∞ API: {data}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            return None

        rates = data["conversion_rates"]
        return {
            "USD/KZT": rates.get("KZT"),
            "EUR/KZT": rates.get("KZT") / rates.get("EUR") if rates.get("EUR") else None,
            "BTC/USD": get_crypto_price("BTC"),
            "ETH/USD": get_crypto_price("ETH"),
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None

def get_crypto_price(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (BTC/USD, ETH/USD)."""
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol.lower()}&vs_currencies=usd"
    try:
        response = requests.get(url)
        data = response.json()
        return data[symbol.lower()]["usd"] if symbol.lower() in data else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {symbol}: {e}")
        return None

def update_pinned_message():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏."""
    rates = get_exchange_rates()
    if not rates:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    text = "üí± *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*:\n\n"

    if rates["USD/KZT"] is not None:
        text += f"üá∫üá∏ 1 USD = {rates['USD/KZT']:.2f} KZT\n"
    else:
        text += "üá∫üá∏ 1 USD = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["EUR/KZT"] is not None:
        text += f"üá™üá∫ 1 EUR = {rates['EUR/KZT']:.2f} KZT\n"
    else:
        text += "üá™üá∫ 1 EUR = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["BTC/USD"] is not None:
        text += f"‚Çø 1 BTC = {rates['BTC/USD']:.2f} USD\n"
    else:
        text += "‚Çø 1 BTC = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    if rates["ETH/USD"] is not None:
        text += f"‚õè 1 ETH = {rates['ETH/USD']:.2f} USD\n"
    else:
        text += "‚õè 1 ETH = ‚ùå (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n"

    for chat_id in CHAT_IDS:
        try:
            chat = bot.get_chat(chat_id)
            pinned_message = chat.pinned_message

            if pinned_message:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=pinned_message.message_id,
                    text=text,
                    parse_mode="Markdown",
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                sent_message = bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode="Markdown",
                )
                bot.pin_chat_message(
                    chat_id=chat_id,
                    message_id=sent_message.message_id,
                )
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            update_pinned_message()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        time.sleep(600)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
